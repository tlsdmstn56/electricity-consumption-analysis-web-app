shiny::runApp('consumption-analysis/src')
runApp('consumption-analysis/src')
barplot
?quantile
runApp('consumption-analysis/src')
runApp('consumption-analysis/src')
runApp('consumption-analysis/src')
# codebook cleasing
codebook <- readxl::read_xlsx("./data/codebook2015_public_v3.xlsx",skip = 3)
codebook <- data.frame(name=codebook$`SAS Variable Name`,
desc=codebook$`Variable Description`,
coded=codebook$X__1,
cat=codebook$`Final Response Set`
)
# codebook cleasing
codebook <- readxl::read_xlsx("./data/codebook2015_public_v3.xlsx",skip = 3)
codebook <- data.frame(name=codebook$`SAS Variable Name`,
desc=codebook$`Variable Description`,
coded=codebook$X__1,
cat=codebook$`Final Response Set`
)
getwd()
# codebook cleasing
codebook <- readxl::read_xlsx("../data/codebook2015_public_v3.xlsx",skip = 3)
source('~/electricity-consumption-analysis-web-app/consumption-analysis/src/data-cleanse.R', echo=TRUE)
library(readr)
library(dplyr)
library(xlsx)
codebook <- data.frame(name=codebook$`SAS Variable Name`,
desc=codebook$`Variable Description`,
coded=codebook$X__1,
cat=codebook$`Final Response Set`
)
cat.table <- rep(0,NROW(codebook))
for(i in seq(1:NROW(codebook))) {
code <- strsplit(as.character(codebook[i,3]),"\r\n")
cat <- strsplit(as.character(codebook[i,4]),"\r\n")
rs <- ""
for(j in 1:NROW(cat[[1]])){
rs <- paste(rs,code[[1]][j],"\t",cat[[1]][j],sep="",end="\n")
}
cat.table[i]=rs
}
cat.table
codebook_final <- data.frame(name=unlist(codebook$name),
desc=unlist(codebook$desc),
coded=cat.table)
codebook_final
codebook_final[1,1:3]
codebook_final[1,3]
codebook_final <- data.frame(name=unlist(codebook$name),
desc=unlist(codebook$desc),
coded=unlist(cat.table))
codebook_final[1,3]
codebook_final[1:2,3]
runApp('consumption-analysis/src')
runApp('consumption-analysis/src')
head(codebook$desc)
head(unlist(codebook$desc))
test = read_csv("../data/codebook_final.csv")
head(test)
runApp('consumption-analysis/src')
install.packages("DT")
runApp('consumption-analysis/src')
drop.codebook.row <- function(data, pattern) {
return(data[-grep(pattern, unlist(data$name)), ])
}
drop.codebook.row <- function(data, pattern, print_result=FALSE) {
test <- data[-grep(pattern, unlist(data$name)), ]
if (print_result) {
cat(NROW(data),"-->",NROW(test),end="\n")
}
return(test)
}
tmp <- drop.codebook.row(codebook_final,"CUFEET",TRUE)
codebook_final <- drop.column.re(codebook_final,"CUFEET")
codebook_final <- drop.column.re(codebook_final,"BRRWT")
codebook_final <- drop.column.re(codebook_final,"BTUNG")
codebook_final <- drop.column.re(codebook_final,"GALLON")
codebook_final <- drop.column.re(codebook_final,"DOEID")
codebook_final <- drop.column.re(codebook_final,"REGIONC")
codebook_final <- drop.column.re(codebook_final,"^Z+")
codebook_final <- drop.column.re(codebook_final,"TOTU")
codebook_final <- drop.column.re(codebook_final,"NWEIGHT")
codebook_final <- drop.column.re(codebook_final,"CDD",ask=F)
codebook_final <- drop.column.re(codebook_final,"HDD",ask=F)
codebook_final <- drop.column.re(codebook_final,"DOLNG")
codebook_final <- drop.column.re(codebook_final,"BTULP")
codebook_final <- drop.column.re(codebook_final,"DOLLP")
codebook_final <- drop.column.re(codebook_final,"BTUFO")
codebook_final <- drop.column.re(codebook_final,"DOLFO")
codebook_final <- drop.column.re(codebook_final,"TOTAL")
codebook_final <- drop.column.re(codebook_final,"FUEL")
codebook_final <- drop.column.re(codebook_final,"^TOT*")
# codebook cleasing
codebook <- readxl::read_xlsx("./data/codebook2015_public_v3.xlsx",skip = 3)
# codebook cleasing
codebook <- readxl::read_xlsx("../data/codebook2015_public_v3.xlsx",skip = 3)
codebook <- data.frame(name=codebook$`SAS Variable Name`,
desc=codebook$`Variable Description`,
coded=codebook$X__1,
cat=codebook$`Final Response Set`
)
cat.table <- rep(0,NROW(codebook))
for(i in seq(1:NROW(codebook))) {
code <- strsplit(as.character(codebook[i,3]),"\r\n")
cat <- strsplit(as.character(codebook[i,4]),"\r\n")
rs <- ""
for(j in 1:NROW(cat[[1]])){
rs <- paste(rs,code[[1]][j],"\t",cat[[1]][j],sep="",end="\n")
}
cat.table[i]=rs
}
codebook_final <- data.frame(name=unlist(codebook$name),
desc=unlist(codebook$desc),
coded=unlist(cat.table))
drop.codebook.row <- function(data, pattern, print_result=FALSE) {
test <- data[-grep(pattern, unlist(data$name)), ]
if (print_result) {
cat(NROW(data),"-->",NROW(test),end="\n")
}
return(test)
}
codebook_final <- drop.codebook.row(codebook_final,"CUFEET")
codebook_final <- drop.codebook.row(codebook_final,"BRRWT")
codebook_final <- drop.codebook.row(codebook_final,"BTUNG")
codebook_final <- drop.codebook.row(codebook_final,"GALLON")
codebook_final <- drop.codebook.row(codebook_final,"DOEID")
codebook_final <- drop.codebook.row(codebook_final,"REGIONC")
codebook_final <- drop.codebook.row(codebook_final,"^Z+")
codebook_final <- drop.codebook.row(codebook_final,"TOTU")
codebook_final <- drop.codebook.row(codebook_final,"NWEIGHT")
codebook_final <- drop.codebook.row(codebook_final,"CDD",ask=F)
codebook_final <- drop.codebook.row(codebook_final,"BRRWT")
codebook_final <- drop.codebook.row(codebook_final,"BTUNG")
codebook_final <- drop.codebook.row(codebook_final,"GALLON")
codebook_final <- drop.codebook.row(codebook_final,"DOEID")
codebook_final <- drop.codebook.row(codebook_final,"REGIONC")
codebook_final <- drop.codebook.row(codebook_final,"^Z+")
codebook_final <- drop.codebook.row(codebook_final,"TOTU")
codebook_final <- drop.codebook.row(codebook_final,"NWEIGHT")
codebook_final <- drop.codebook.row(codebook_final,"CDD")
codebook_final <- drop.codebook.row(codebook_final,"HDD")
codebook_final <- drop.codebook.row(codebook_final,"DOLNG")
codebook_final <- drop.codebook.row(codebook_final,"BTULP")
codebook_final <- drop.codebook.row(codebook_final,"DOLLP")
codebook_final <- drop.codebook.row(codebook_final,"BTUFO")
codebook_final <- drop.codebook.row(codebook_final,"DOLFO")
codebook_final <- drop.codebook.row(codebook_final,"TOTAL")
codebook_final <- drop.codebook.row(codebook_final,"FUEL")
codebook_final <- drop.codebook.row(codebook_final,"^TOT*")
dim(codebook_final)
# codebook cleasing
codebook <- readxl::read_xlsx("../data/codebook2015_public_v3.xlsx",skip = 3)
codebook <- data.frame(name=codebook$`SAS Variable Name`,
desc=codebook$`Variable Description`,
coded=codebook$X__1,
cat=codebook$`Final Response Set`
)
drop.codebook.row <- function(data, pattern, print_result=FALSE) {
test <- data[-grep(pattern, unlist(data$name)), ]
if (print_result) {
cat(NROW(data),"-->",NROW(test),end="\n")
}
return(test)
}
cat.table <- rep(0,NROW(codebook))
for(i in seq(1:NROW(codebook))) {
code <- strsplit(as.character(codebook[i,3]),"\r\n")
cat <- strsplit(as.character(codebook[i,4]),"\r\n")
rs <- ""
for(j in 1:NROW(cat[[1]])){
rs <- paste(rs,code[[1]][j],"\t",cat[[1]][j],sep="",end="\n")
}
cat.table[i]=rs
}
codebook_final <- data.frame(name=unlist(codebook$name),
desc=unlist(codebook$desc),
coded=unlist(cat.table))
drop.codebook.row <- function(data, pattern, print_result=FALSE) {
test <- data[-grep(pattern, unlist(data$name)), ]
if (print_result) {
cat(NROW(data),"-->",NROW(test),end="\n")
}
return(test)
}
codebook_final <- drop.codebook.row(codebook_final,"CUFEET")
NROW(codebook_final)
codebook_final <- drop.codebook.row(codebook_final,"BRRWT")
NROW(codebook_final)
codebook_final <- drop.codebook.row(codebook_final,"BTUNG")
codebook_final <- drop.codebook.row(codebook_final,"BTUNG")
NROW(codebook_final)
# codebook cleasing
codebook <- readxl::read_xlsx("../data/codebook2015_public_v3.xlsx",skip = 3)
codebook <- data.frame(name=codebook$`SAS Variable Name`,
desc=codebook$`Variable Description`,
coded=codebook$X__1,
cat=codebook$`Final Response Set`
)
cat.table <- rep(0,NROW(codebook))
for(i in seq(1:NROW(codebook))) {
code <- strsplit(as.character(codebook[i,3]),"\r\n")
cat <- strsplit(as.character(codebook[i,4]),"\r\n")
rs <- ""
for(j in 1:NROW(cat[[1]])){
rs <- paste(rs,code[[1]][j],"\t",cat[[1]][j],sep="",end="\n")
}
cat.table[i]=rs
}
codebook_final <- data.frame(name=unlist(codebook$name),
desc=unlist(codebook$desc),
coded=unlist(cat.table))
drop.codebook.row <- function(data, pattern, print_result=FALSE) {
test <- data[-grep(pattern, unlist(data$name)), ]
if (print_result) {
cat(NROW(data),"-->",NROW(test),end="\n")
}
return(test)
}
codebook_final <- drop.codebook.row(codebook_final,"CUFEET")
codebook_final <- drop.codebook.row(codebook_final,"BRRWT")
codebook_final <- drop.codebook.row(codebook_final,"BTUNG")
codebook_final <- drop.codebook.row(codebook_final,"GALLON")
codebook_final <- drop.codebook.row(codebook_final,"DOEID")
codebook_final <- drop.codebook.row(codebook_final,"REGIONC")
codebook_final <- drop.codebook.row(codebook_final,"^Z+")
codebook_final <- drop.codebook.row(codebook_final,"TOTU")
codebook_final <- drop.codebook.row(codebook_final,"NWEIGHT")
codebook_final <- drop.codebook.row(codebook_final,"CDD")
codebook_final <- drop.codebook.row(codebook_final,"HDD")
codebook_final <- drop.codebook.row(codebook_final,"DOLNG")
codebook_final <- drop.codebook.row(codebook_final,"BTULP")
codebook_final <- drop.codebook.row(codebook_final,"DOLLP")
codebook_final <- drop.codebook.row(codebook_final,"BTUFO")
codebook_final <- drop.codebook.row(codebook_final,"DOLFO")
codebook_final <- drop.codebook.row(codebook_final,"TOTAL")
codebook_final <- drop.codebook.row(codebook_final,"FUEL")
codebook_final <- drop.codebook.row(codebook_final,"^TOT*")
NROW(codebook_final)
write.csv(codebook_final,"./data/codebook_final.csv",row.names=FALSE)
write.csv(codebook_final,"../data/codebook_final.csv",row.names=FALSE)
runApp('consumption-analysis/src')
runApp('consumption-analysis/src')
write.csv(codebook_final,"../data/codebook_final.csv",row.names=FALSE)
runApp('consumption-analysis/src')
# codebook cleasing
codebook <- readxl::read_xlsx("../data/codebook2015_public_v3.xlsx",skip = 3)
codebook <- data.frame(name=codebook$`SAS Variable Name`,
desc=codebook$`Variable Description`,
coded=codebook$X__1,
cat=codebook$`Final Response Set`
)
cat.table <- rep(0,NROW(codebook))
for(i in seq(1:NROW(codebook))) {
code <- strsplit(as.character(codebook[i,3]),"\r\n")
cat <- strsplit(as.character(codebook[i,4]),"\r\n")
rs <- ""
for(j in 1:NROW(cat[[1]])){
rs <- paste(rs,code[[1]][j],"\t",cat[[1]][j],sep="",end="\n")
}
cat.table[i]=rs
}
codebook_final <- data.frame(name=unlist(codebook$name),
desc=unlist(codebook$desc),
coded=unlist(cat.table))
drop.codebook.row <- function(data, pattern, print_result=FALSE) {
test <- data[-grep(pattern, unlist(data$name)), ]
if (print_result) {
cat(NROW(data),"-->",NROW(test),end="\n")
}
return(test)d
}
drop.codebook.row <- function(data, pattern, print_result=FALSE) {
test <- data[-grep(pattern, unlist(data$name)), ]
if (print_result) {
cat(NROW(data),"-->",NROW(test),end="\n")
}
return(test)
}
codebook_final <- drop.codebook.row(codebook_final,"CUFEET")
codebook_final <- drop.codebook.row(codebook_final,"BRRWT")
codebook_final <- drop.codebook.row(codebook_final,"BTUNG")
codebook_final <- drop.codebook.row(codebook_final,"GALLON")
codebook_final <- drop.codebook.row(codebook_final,"DOEID")
codebook_final <- drop.codebook.row(codebook_final,"REGIONC")
codebook_final <- drop.codebook.row(codebook_final,"^Z+")
codebook_final <- drop.codebook.row(codebook_final,"TOTU")
codebook_final <- drop.codebook.row(codebook_final,"NWEIGHT")
codebook_final <- drop.codebook.row(codebook_final,"CDD")
codebook_final <- drop.codebook.row(codebook_final,"HDD")
codebook_final <- drop.codebook.row(codebook_final,"DOLNG")
codebook_final <- drop.codebook.row(codebook_final,"BTULP")
codebook_final <- drop.codebook.row(codebook_final,"DOLLP")
codebook_final <- drop.codebook.row(codebook_final,"BTUFO")
codebook_final <- drop.codebook.row(codebook_final,"DOLFO")
codebook_final <- drop.codebook.row(codebook_final,"TOTAL")
codebook_final <- drop.codebook.row(codebook_final,"FUEL")
codebook_final <- drop.codebook.row(codebook_final,"^TOT*")
write.csv(codebook_final,"../data/codebook_final.csv",row.names=FALSE)
write.csv(codebook_final,"../data/codebook_final.csv",row.names=FALSE,)
getwd()
setwd(paste0(getwd(),"/consumption-analysis"))
write.csv(codebook_final,"./data/codebook_final.csv",row.names=FALSE)
# codebook cleasing
codebook <- readxl::read_xlsx("./data/codebook2015_public_v3.xlsx",skip = 3)
codebook <- data.frame(name=codebook$`SAS Variable Name`,
desc=codebook$`Variable Description`,
coded=codebook$X__1,
cat=codebook$`Final Response Set`
)
cat.table <- rep(0,NROW(codebook))
for(i in seq(1:NROW(codebook))) {
code <- strsplit(as.character(codebook[i,3]),"\r\n")
cat <- strsplit(as.character(codebook[i,4]),"\r\n")
rs <- ""
for(j in 1:NROW(cat[[1]])){
rs <- paste(rs,code[[1]][j],"\t",cat[[1]][j],sep="",end="\n")
}
cat.table[i]=rs
}
codebook_final <- data.frame(name=unlist(codebook$name),
desc=unlist(codebook$desc),
coded=unlist(cat.table))
drop.codebook.row <- function(data, pattern, print_result=FALSE) {
test <- data[-grep(pattern, unlist(data$name)), ]
if (print_result) {
cat(NROW(data),"-->",NROW(test),end="\n")
}
return(test)
}
codebook_final <- drop.codebook.row(codebook_final,"CUFEET")
codebook_final <- drop.codebook.row(codebook_final,"BRRWT")
codebook_final <- drop.codebook.row(codebook_final,"BTUNG")
codebook_final <- drop.codebook.row(codebook_final,"GALLON")
codebook_final <- drop.codebook.row(codebook_final,"DOEID")
codebook_final <- drop.codebook.row(codebook_final,"REGIONC")
codebook_final <- drop.codebook.row(codebook_final,"^Z+")
codebook_final <- drop.codebook.row(codebook_final,"TOTU")
codebook_final <- drop.codebook.row(codebook_final,"NWEIGHT")
codebook_final <- drop.codebook.row(codebook_final,"CDD")
codebook_final <- drop.codebook.row(codebook_final,"HDD")
codebook_final <- drop.codebook.row(codebook_final,"DOLNG")
codebook_final <- drop.codebook.row(codebook_final,"BTULP")
codebook_final <- drop.codebook.row(codebook_final,"DOLLP")
codebook_final <- drop.codebook.row(codebook_final,"BTUFO")
codebook_final <- drop.codebook.row(codebook_final,"DOLFO")
codebook_final <- drop.codebook.row(codebook_final,"TOTAL")
codebook_final <- drop.codebook.row(codebook_final,"FUEL")
codebook_final <- drop.codebook.row(codebook_final,"^TOT*")
runApp('src')
runApp('src')
runApp('src')
Sys.time()
Sys.Date()
?paste0
month(Sys.time())
stri_rand_strings
seed
Sys.Date()
runApp('src')
?jpeg
runApp('src')
runApp('src')
?includeText
runApp('src')
?zip
zip
runApp('src')
runApp('src')
runApp('src')
runApp('src')
install.packages("plotly")
runApp('src')
write(c"Hello",sep="_"
write(c("Hello","world"),sep="_",file = "test.txt"
)
write(c("Hello","world"),sep="_",file = "test.txt")
write(c("Hello","world"),sep="_",file = "test.txt",append = TRUE)
write(c("Hello","world"),sep="_",file = "test.txt",append = TRUE,end=" ")
write(c("Hello","world"),sep="_",file = "test.txt",append = TRUE)
runApp('src')
runApp('src')
write(c("Hello","world","jkkk"),sep="_",file = "test.txt",append = TRUE)
10 %2
10 %%2
runApp('src')
runApp('src')
?text
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
plot.new()
par(oma=c(3,3,3,3),mar=c(2,2,2,2))
plot.new()
plot.new()
plot(0:1,type="n",yaxt="n",xaxt="n")
plot(0:1,bty="n",type="n",yaxt="n",xaxt="n")
plot(1:10)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
plot(0:1,type="n",yaxt="n",xaxt="n")
plot(0:1,bty="n",type="n",yaxt="n",xaxt="n")
plot(0:1,bty="n",type="n",yaxt="n",xaxt="n",ylab="",xlab="")
text(0,1, get.codebook.str(input))
runApp('src')
?text
runApp('src')
plot(-1:1, -1:1, type = "n", xlab = "Re", ylab = "Im")
K <- 16; text(exp(1i * 2 * pi * (1:K) / K), col = 2)
## The following two examples use latin1 characters: these may not
## appear correctly (or be omitted entirely).
plot(1:10, 1:10, main = "text(...) examples\n~~~~~~~~~~~~~~",
sub = "R is GNU ©, but not ® ...")
mtext("«Latin-1 accented chars»: éè øØ å<Å æ<Æ", side = 3)
points(c(6,2), c(2,1), pch = 3, cex = 4, col = "red")
text(6, 2, "the text is CENTERED around (x,y) = (6,2) by default",
cex = .8)
text(2, 1, "or Left/Bottom - JUSTIFIED at (2,1) by 'adj = c(0,0)'",
adj = c(0,0))
text(4, 9, expression(hat(beta) == (X^t * X)^{-1} * X^t * y))
text(4, 8.4, "expression(hat(beta) == (X^t * X)^{-1} * X^t * y)",
cex = .75)
text(4, 7, expression(bar(x) == sum(frac(x[i], n), i==1, n)))
## Two more latin1 examples
text(5, 10.2,
"Le français, c'est façile: Règles, Liberté, Egalité, Fraternité...")
text(5, 9.8,
"Jetz no chli züritüütsch: (noch ein bißchen Zürcher deutsch)")
runApp('src')
system("./test-deploy.sh")
tempdir()
?write.csv
runApp('src')
install.packages("xlsx")
write.xlsx
library(xlsx)
install.packages("rJava")
install.packages("readxl")
install.packages("readxl")
install.packages("writexl")
library(writexl)
?write_xlsx
tempdir
tempdir()
shiny::runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
data("iris")
iris
library('dplyr')
iris %>% select(1:4) %>% head
iris %>% select(1:4) %>% is.data.frame
iris %>% select(1:4) %>% summarise_all(funs(mean))
iris %>% select(1:4) %>% summarise_all(funs(mean)) %>% is.vector
iris %>% select(1:4) %>% summarise_all(funs(mean)) %>% str
iris %>% select(1:4) %>% summarise_all(funs(mean)) %>% pull(1)
iris %>% select(1:4) %>% summarise_all(funs(mean)) %>% pull(2)
iris %>% select(1:4) %>% summarise_all(funs(mean)) %>% pull(3)
iris %>% select(1:4) %>% summarise_all(funs(mean)) %>% pull(4)
runApp('src')
runApp('src')
