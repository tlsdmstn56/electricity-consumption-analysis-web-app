runApp('src')
runApp('src')
runApp('src')
runApp('src')
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp('src')
a = 1:3
b = LETTERS[1:3]
list(a=b)
KWH_DF
# library import
library(shiny)
library(DT)
library(readr)
library(dplyr)
library(jsonlite)
library(ggplot2)
library(plotly)
library(shinycssloaders)
library(gridExtra)
library(tidyr)
library(tibble)
library(shinyBS)
library(lemon)
library(shinyWidgets)
theme_set(theme_grey())
# Data Import
DATA <-
read_csv("../data/recs2015_clean.csv", locale = locale(tz = "US/Pacific"))
CODEBOOK <-
read_csv("../data/codebook_final_with_type.csv", na = c("", ""))
CODEBOOK <- CODEBOOK[-c(334, 335), ]
CODEBOOK_JSON <- fromJSON("../data/codebook_final.json")
# Constants
KWH <- DATA[['KWH']]
KWH_COL_IDX <- grep("^KWH*", unlist(colnames(DATA)))
KWH_COL_IDX <- KWH_COL_IDX[2:length(KWH_COL_IDX)]
KWH_DF <- as.data.frame(DATA[, KWH_COL_IDX])
getwd()
setwd(paste0("/Users/eunsoo/electricity-consumption-analysis-web-app","/sr"))
setwd(paste0("/Users/eunsoo/electricity-consumption-analysis-web-app","/src"))
# Data Import
DATA <-
read_csv("../data/recs2015_clean.csv", locale = locale(tz = "US/Pacific"))
CODEBOOK <-
read_csv("../data/codebook_final_with_type.csv", na = c("", ""))
CODEBOOK <- CODEBOOK[-c(334, 335), ]
CODEBOOK_JSON <- fromJSON("../data/codebook_final.json")
# Constants
KWH <- DATA[['KWH']]
KWH_COL_IDX <- grep("^KWH*", unlist(colnames(DATA)))
KWH_COL_IDX <- KWH_COL_IDX[2:length(KWH_COL_IDX)]
KWH_DF <- as.data.frame(DATA[, KWH_COL_IDX])
USAGE_DESC <-
c(
'space hitting',
'AC(central, individual)',
'water heating',
'all refrigerators',
'first refrigerators',
'second refrigerators',
'freezers',
'cooking(stove, cooktop, oven)',
'microwave',
'clothes washer',
'clothes dryer',
'dishwashers',
'lighting(indor, outdoor)',
'all TV',
'first tv',
'second tv',
'air handler for heating',
'air handler for cooling',
'evaporative cooler',
'ceiling fan',
'dehumidifiers',
'humidifiers',
'swimming pool pump',
'hot tub pumps',
'hot tub heaters',
'etc'
)
USAGE_DESC_TABLE <- data.frame(name = colnames(DATA)[KWH_COL_IDX])
N_USAGE_DESC <- length(USAGE_DESC)
colnames(KWH_DF) <- USAGE_DESC
KWH_DF_LONG <- gather(KWH_DF)
COLNAMES_IN_DROPDOWN <- names(DATA)
DROPDOWN_MENU <- sort(COLNAMES_IN_DROPDOWN[1:242])
TEMP_DIR <- tempdir()
source("utils.R", local = TRUE)
source("ui.R", local = TRUE)
CHOICE_LIST <- list()
for (i in 1:N_USAGE_DESC) {
CHOICE_LIST[[USAGE_DESC[i]]] <- i
}
CHOICE_LIST
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
seq_len
seq_len(1)
seq_len(2)
seq_len(10)
seq_len(10) == 1:10
seq_len(10) === 1:10
seq_len(10) = 1:10
seq_len(10) == 1:10
plotList <- function(nplots) {
lapply(seq_len(nplots), function(x) plot_ly())
}
s1 <- subplot(plotList(6), nrows = 2, shareX = TRUE, shareY = TRUE)
s2 <- subplot(plotList(2), shareY = TRUE)
p <- subplot(s1, s2, plot_ly(), nrows = 3, margin = 0.04, heights = c(0.6, 0.3, 0.1))
plotList <- function(nplots) {
lapply(seq_len(nplots), function(x) plot_ly(type="scatter"))
}
s1 <- subplot(plotList(6), nrows = 2, shareX = TRUE, shareY = TRUE)
s2 <- subplot(plotList(2), shareY = TRUE)
plotList <- function(nplots) {
lapply(seq_len(nplots), function(x) plot_ly(type="box"))
}
s1 <- subplot(plotList(6), nrows = 2, shareX = TRUE, shareY = TRUE)
s2 <- subplot(plotList(2), shareY = TRUE)
p <- subplot(s1, s2, plot_ly(), nrows = 3, margin = 0.04, heights = c(0.6, 0.3, 0.1))
p <- subplot(s1, s2, nrows = 3, margin = 0.04, heights = c(0.6, 0.3, 0.1))
library(plotly)
p1 <- plot_ly(economics, x = ~date, y = ~unemploy) %>%
add_lines(name = ~"unemploy")
p2 <- plot_ly(economics, x = ~date, y = ~uempmed) %>%
add_lines(name = ~"uempmed")
p <- subplot(p1, p2)
p
library(plotly)
p1 <- plot_ly(economics, x = ~date, y = ~unemploy) %>%
add_lines(name = ~"unemploy")
p2 <- plot_ly(economics, x = ~date, y = ~uempmed) %>%
add_lines(name = ~"uempmed")
p <- subplot(p1, p2,p1,p1,p1,p1,p2, ncol=3)
library(plotly)
p1 <- plot_ly(economics, x = ~date, y = ~unemploy) %>%
add_lines(name = ~"unemploy")
p2 <- plot_ly(economics, x = ~date, y = ~uempmed) %>%
add_lines(name = ~"uempmed")
p <- subplot(list(p1, p2,p1,p1,p1,p1,p2), ncol=3)
library(plotly)
p1 <- plot_ly(economics, x = ~date, y = ~unemploy) %>%
add_lines(name = ~"unemploy")
p2 <- plot_ly(economics, x = ~date, y = ~uempmed) %>%
add_lines(name = ~"uempmed")
p <- subplot(list(p1, p2,p1,p1,p1,p1,p2), ncol=7)
library(plotly)
p1 <- plot_ly(economics, x = ~date, y = ~unemploy) %>%
add_lines(name = ~"unemploy")
p2 <- plot_ly(economics, x = ~date, y = ~uempmed) %>%
add_lines(name = ~"uempmed")
p <- subplot(list(p1, p2,p1,p1,p1,p1,p2), ncol=2)
library(plotly)
p1 <- plot_ly(economics, x = ~date, y = ~unemploy) %>%
add_lines(name = ~"unemploy")
p2 <- plot_ly(economics, x = ~date, y = ~uempmed) %>%
add_lines(name = ~"uempmed")
p <- subplot(list(p1, p2,p1,p1,p1,p1,p2), ncol=3)
library(plotly)
p1 <- plot_ly(economics, x = ~date, y = ~unemploy) %>%
add_lines(name = ~"unemploy")
p2 <- plot_ly(economics, x = ~date, y = ~uempmed) %>%
add_lines(name = ~"uempmed")
p <- subplot(list(p1, p2,p1,p1,p1,p1,p2), ncols=3)
library(plotly)
p1 <- plot_ly(economics, x = ~date, y = ~unemploy) %>%
add_lines(name = ~"unemploy")
p2 <- plot_ly(economics, x = ~date, y = ~uempmed) %>%
add_lines(name = ~"uempmed")
p <- subplot(list(p1, p2,p1,p1,p1,p1,p2), nrows=3)
p
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
runApp()
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("hashmap")
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
ui <- fluidPage(
tags$head(
tags$script(
'
var dimension = [0, 0];
$(document).on("shiny:connected", function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
$(window).resize(function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
'
)
),
# title
titlePanel("Consumption Analysis", windowTitle = "Consumption Analysis"),
# guide(frequent used variables, data source, some infos)
tagList(
p(
"Data Source: ",
a(
href = "https://www.eia.gov/consumption/residential/data/2015/",
"RECS2015(Residential Electricity Consumption Survey 2015)"
)
),
tags$ul(
tags$li("MONEYPY: income"),
tags$li("CLIMATE_REGION_PUB: climate(cold, very cold, hot dry,...)"),
tags$li(
"TYPEHUQ: Type of housing unit(mobile, single-family, apartment..)"
),
tags$li("UATYP10: Census 2010 Urban Type(Urban, Rural)"),
tags$li("DIVISION: Census Division(New Englance, Pacific..)"),
tags$li("HHSEX: Respondent gender"),
tags$li("HHAGE: Respondent age"),
tags$li("EMPLOYHH: Respondent employment status(fulltime, part time..)")
),
p("eunsoo.sheen@encoredtech.com for any feedback")
),
# Navigation Bar on the top
navbarPage(
title = "Menu",
# Total Consumption Tab
tabPanel(
"Total Consumption",
sidebarLayout(
sidebarPanel(
h3("Auto-sizing Plot"),
switchInput(inputId = "p1_box_autosize", value =
TRUE),
conditionalPanel(
condition = "!input.p1_box_autosize",
sliderInput(
"p1_box_height",
"Height:",
min = 0,
max = 1000,
value = 600
),
sliderInput(
"p1_box_width",
"Width:",
min = 0,
max = 2000,
value = 800
)
),
hr(),
h3("Variables"),
# first group
selectInput("p1_criterion1",
"X variable",
DROPDOWN_MENU),
# second group
selectInput("p1_criterion2",
"Color Variable",
c("None", DROPDOWN_MENU)),
# group description
htmlOutput("p1_var_desc")
),
# plots and summary, anova
mainPanel(tabsetPanel(
tabPanel("Box Plot",
plotlyOutput("p1_boxplot") %>% withSpinner),
tabPanel("Summary",
verbatimTextOutput("p1_summary")),
tabPanel("Anova Test",
verbatimTextOutput("p1_aov")),
id = "p1_tabs"
)) # end of main panel
),
value = "p1"
),
# Consumption Usage tab
tabPanel(
"Consumption Usage",
sidebarLayout(
# for group selection
sidebarPanel(
conditionalPanel(
condition = "input.p2_tabs=='box'",
h3("Auto-sizing Plot"),
switchInput(inputId = "p2_box_autosize", value =
TRUE),
conditionalPanel(
"!input.p2_box_autosize",
sliderInput(
"p2_box_height",
"Height:",
min = 400,
max = 1000,
value = 500
),
sliderInput(
"p2_box_width",
"Width:",
min = 400,
max = 1200,
value = 500
)
)
),
conditionalPanel(
"input.p2_tabs=='bar",
h3("Auto-sizing Plot"),
switchInput(inputId = "p2_bar_autosize", value =
TRUE),
conditionalPanel(
"!input.p2_bar_autosize",
sliderInput(
"p2_bar_height",
"Height:",
min = 400,
max = 1000,
value = 500
),
sliderInput(
"p2_bar_width",
"Width:",
min = 400,
max = 1200,
value = 500
)
)
),
hr(),
selectInput("p2_criterion", label = h3("X axis"),
sort(COLNAMES_IN_DROPDOWN[1:242])),
conditionalPanel(
condition = "input.p2_tabs=='box'",
checkboxGroupInput(
"p2_box_y",
label = h3("Y axis"),
choices = CHOICE_LIST,
selected = 1
)
),
htmlOutput("p2_var_desc"),
htmlOutput("p2_legend")
),
mainPanel(tabsetPanel(
tabPanel("Box Plot",
uiOutput('p2_boxplots_ui'), value = "box")
),
tabPanel(
"Bar Chart",
br(),
tags$p("Press Download Button for bigger image"),
tags$div(
downloadButton("p2_download_barplot_split",
"Download(file by plots, .zip)"),
downloadButton(
"p2_download_barplot_combined",
"Download(combined to one file, .jpeg)"
)
),
br(),
plotlyOutput("p2_barplot")
#, width=1500, height=700) %>%
withSpinner,
value = "bar"
),
tabPanel(
"Summary Table",
htmlOutput("p2_summary_header_avg"),
br(),
tags$div(
downloadButton("p2_download_summary_avg",
"Download(average, .csv)")
),
br(),
tableOutput("p2_summary_avg"),
br(),
htmlOutput("p2_summary_header_percentage"),
br(),
tags$div(
downloadButton(
"p2_download_summary_percentage",
"Download(percentage, csv)"
)
),
br(),
tableOutput("p2_summary_percentage"),
value = "summary"
),
id = "p2_tabs"
) # end of p2 tabsetpanel) # end of main panel
),
value = "p2"
),
# code book for variable description
tabPanel("Codebook", dataTableOutput('p3_codebook'),
value = "p3"),
id = 'main_nav'
)
)
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
runApp()
runApp()
?plot_ly
runApp()
runApp()
runApp()
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
?sidebarPanel
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
?ifelse
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
source('~/electricity-consumption-analysis-web-app/src/ui.R', echo=TRUE)
runApp()
